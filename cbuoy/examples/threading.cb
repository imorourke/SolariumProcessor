const STACK_SIZE: u32 = 1024;
const STACK_NUM: u32 = 4;
global THREAD_NUM: u32 = 0;

struct thread_stack_t {
    last_ptr: u32;
    stack: [STACK_SIZE]u8;
}

global THREAD_STACK: [STACK_NUM]thread_stack_t;

global SERIAL_OUT_LOC: *u8 = 0xA000u32 + 5;

asmfn scheduler() void {
    "intoff";
    "inton";
    "retint";
}

asmfn tsk_yield() void {
    "intoff";
    "inton";
    "ret";
}

asmfn print(c: *u8) void {
    "ldn 8:u32";
    ".loadloc %{SERIAL_OUT_LOC}%";
    "ld 8:u32 8";
    ".align";
    "ldi 9:u16 1";
    "ld 10:u32 $arg";
    "ldi 11:u16 @{c}@";
    "add 10:u32 10 11";
    "ld 11:u8 10";
    "tz 11";
    "jmpri 16";
    "sav 8:u8 11";
    "add 10:u32 10 9";
    "jmpri -20";
    "ret";
}

fn init_thread(func: fn() void) void {
    if (THREAD_NUM < STACK_NUM) {
        def current_stack: *u8 = THREAD_STACK[THREAD_NUM].stack;
        def current: *u32 = current_stack : *u32;
        current[0] = func;
        current[2] = (current_stack : u32) + 32 * 4;
        THREAD_STACK[THREAD_NUM].last_ptr = current[2];
        THREAD_NUM = THREAD_NUM + 1;
    } else {
        print("Exceed allowed thread count\n");
    }
}

fn main_tsk_a() void {
    while (1) {
        print("TSK_A\n");
    }
}

fn main_tsk_b() void {
    while (1) {
        print("TSK_B\n");
    }
}

asmfn tsk_main() void {
}

fn main() void {
    def irq0_loc: *u32 = 0x100;
    *irq0_loc = scheduler();
    init_thread(main_tsk_a);
    init_thread(main_tsk_b);
    tsk_main();
}
