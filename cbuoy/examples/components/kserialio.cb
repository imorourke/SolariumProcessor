#ifndef K_SERIAL_IO
#define K_SERIAL_IO

global SERIAL_IN_SIZE: const *u8 = 0xA000u32 + 2;
global SERIAL_IN_LOC: const *u8 = 0xA000u32 + 3;
global SERIAL_OUT_LOC: const *u8 = 0xA000u32 + 5;

#ifdef K_SERIAL_IO_CBUOY_PRINT
fn print(c: *u8) void {
    while (*c != 0) {
        *SERIAL_OUT_LOC = *c;
        c = c + 1;
    }
}

fn print_digit(v: u8) void {
    if (v < 10) {
        *SERIAL_OUT_LOC = '0' + v;
    } else {
        *SERIAL_OUT_LOC = '?';
    }
}
#else
asmfn print(c: *u8) void {
    "push $stat";
    "intoff";
    "%LDLOC% 8:u32";
    ".loadloc %{SERIAL_OUT_LOC}%";
    "ld 8:u32 8";
    ".align";
    "ldi 9:u16 1";
    "ld 10:u32 $arg";
    "ldi 11:u16 @{c}@";
    "add 10:u32 10 11";
    "ld 11:u8 10";
    "tz 11";
    "jmpri 16";
    "sav 8:u8 11";
    "add 10:u32 10 9";
    "jmpri -20";
    "popr $stat";
    "ret";
}

asmfn print_digit(v: u8) void {
    "ldi 9:u16 @{v}@";
    "add 9:u32 $arg 9";
    "ld 9:u8 9";
    "ldi 10:u16 10";
    "%LDLOC% 11:u32";
    ".loadloc %{SERIAL_OUT_LOC}%";
    "ld 11:u32 11";
    "tl 12:u8 9 10";
    "tz 12";
    "jmpri 16";
    "ldi 10:u16 '0'";
    "add 10:u8 9 10";
    "jmpri 8";
    "ldi 10:u16 0x3F";
    "sav 11:u8 10";
    "ret";
}
#endif

fn print_uint(v: u32) void {
    def chars: [12]u8;
    def cp: *u8 = &chars;
    if (v == 0) {
        print_digit(0);
    } else {
        while (v != 0) {
            *cp = v % 10;
            v = v / 10;
            cp = cp + 1;
        }
        while (cp != &chars[0]) {
            cp = cp - 1;
            print_digit(*cp);
        }
    }
}

fn print_stat(name: *u8, v: u32) void {
    print(name);
    print(": ");
    print_uint(v);
    print("\n");
}

#endif // K_SERIAL_IO
